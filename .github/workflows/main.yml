# This is a basic workflow to help you get started with Actions

name: CI-CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  CI:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        uses: docker/login-action@v1.9.0
        with:
          # Username used to log against the Docker registry
          username: ${{secrets.DOCKERHUB_USER}}
          # Password or personal access token used to log against the Docker registry
          password: ${{secrets.DOCKERHUB_PWD}}
          # Log out from the Docker registry at the end of a job
          logout: true
      
      - name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        uses: docker/build-push-action@v2.5.0
        with:
          # Build's context is the set of files located in the specified PATH or URL
          context: ./src
          # Path to the Dockerfile
          file: ./src/Dockerfile
          push: true
          tags: |
            guilhermescosta/api-bootcamp-produto:latest
            guilhermescosta/api-bootcamp-produto:${{github.run_number}}
      
  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    steps:
      - uses: actions/checkout@v2
      
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1.1
        with:
          # Acceptable values: generic or arc
          cluster-type: # default is generic
          # Acceptable values: kubeconfig or service-account or service-principal
          method: # default is kubeconfig
          # Kubernetes Config
          kubeconfig: # optional, default is 
          # If your kubeconfig has multiple contexts, use this field to use a specific context, otherwise the default one would be chosen
          context: # optional, default is 
          # Cluster Url
          k8s-url: # optional, default is   
          # Service account secret. Run kubectl get serviceaccounts <service-account-name> -o yaml and copy the service-account-secret-name. Copy the ouptut of kubectl get secret <service-account-secret-name> -o yaml
          k8s-secret: # optional, default is 
          # Token extracted from the secret of service account (should be base 64 decoded)
          token: # optional, default is 
          # Azure resource group name
          resource-group: # optional, default is 
          # Azure connected cluster name
          cluster-name: # optional, default is 
          
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v1.3
        with:
          # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
          namespace: # optional
          # Path to the manifest files which will be used for deployment.
          manifests: # default is 
          # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
          images: # optional
          # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
          imagepullsecrets: # optional
          # Version of kubectl. Installs a specific version of kubectl binary
          kubectl-version: # optional
          # Deployment strategy to be used. Allowed values are none, canary and blue-green
          strategy: # optional, default is none
          # Route based on service, ingress or SMI for blue-green strategy
          route-method: # optional, default is service
          # Indicates the buffer time in minutes before the switch is made to the green version (max is 300 min ie. 5hrs)
          version-switch-buffer: # optional, default is 0
          # Traffic split method to be used. Allowed values are pod, smi
          traffic-split-method: # optional, default is pod
          # Baseline and canary replicas count; valid value i.e between 0 to 100.
          baseline-and-canary-replicas: # optional, default is 0
          # Percentage of traffic redirect to canary deployment
          percentage: # optional, default is 0
          # Arguments
          args: # optional
          # deploy/promote/reject
          action: # default is deploy
          # Deploy when a previous deployment already exists. If true then --force argument is added to the apply command
          force: # optional
          # Github token
          token: # default is ${{ github.token }}
      
